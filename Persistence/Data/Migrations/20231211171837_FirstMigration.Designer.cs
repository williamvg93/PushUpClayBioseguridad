// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.Data;

#nullable disable

namespace Persistence.Data.Migrations
{
    [DbContext(typeof(ApiClayBioSecurutyContext))]
    [Migration("20231211171837_FirstMigration")]
    partial class FirstMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Domain.Entities.Company.Shiftscheduling", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("FkIdContract")
                        .HasColumnType("int")
                        .HasColumnName("fkIdContract");

                    b.Property<int>("FkIdPerson")
                        .HasColumnType("int")
                        .HasColumnName("fkIdPerson");

                    b.Property<int>("FkIdWorkShifts")
                        .HasColumnType("int")
                        .HasColumnName("fkIdWorkShifts");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "FkIdContract" }, "fk_idContract");

                    b.HasIndex(new[] { "FkIdPerson" }, "fk_idEmploShiftSche");

                    b.HasIndex(new[] { "FkIdWorkShifts" }, "fk_idWorkShifts");

                    b.ToTable("shiftscheduling", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Company.Workshift", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("ShiftEndTime")
                        .HasColumnType("datetime")
                        .HasColumnName("shiftEndTime");

                    b.Property<DateTime>("ShiftStartTime")
                        .HasColumnType("datetime")
                        .HasColumnName("shiftStartTime");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("workshifts", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Location.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("address");

                    b.Property<int>("FkIdAddressType")
                        .HasColumnType("int")
                        .HasColumnName("fkIdAddressType");

                    b.Property<int>("FkIdPerson")
                        .HasColumnType("int")
                        .HasColumnName("fkIdPerson");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "FkIdAddressType" }, "fk_idAddressType");

                    b.HasIndex(new[] { "FkIdPerson" }, "fk_idEmployee");

                    b.ToTable("address", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Location.Addresstype", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("description");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("addresstype", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Location.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Name" }, "name")
                        .IsUnique();

                    b.ToTable("country", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Location.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("FkIdCountry")
                        .HasColumnType("int")
                        .HasColumnName("fkIdCountry");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "FkIdCountry" }, "fk_idCountry");

                    b.ToTable("department", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Location.Town", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("FkIdDepartment")
                        .HasColumnType("int")
                        .HasColumnName("fkIdDepartment");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "FkIdDepartment" }, "fk_idDepartment");

                    b.ToTable("town", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.PersonF.Contacttype", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("description");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("contacttype", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.PersonF.Contract", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("ContractEndDate")
                        .HasColumnType("datetime")
                        .HasColumnName("contractEndDate");

                    b.Property<DateTime>("ContractStartDate")
                        .HasColumnType("datetime")
                        .HasColumnName("contractStartDate");

                    b.Property<int>("FkIdClient")
                        .HasColumnType("int")
                        .HasColumnName("fkIdClient");

                    b.Property<int>("FkIdContractStatus")
                        .HasColumnType("int")
                        .HasColumnName("fkIdContractStatus");

                    b.Property<int>("FkIdEmployee")
                        .HasColumnType("int")
                        .HasColumnName("fkIdEmployee");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "FkIdClient" }, "fk_idClientContract");

                    b.HasIndex(new[] { "FkIdContractStatus" }, "fk_idContractStatus");

                    b.HasIndex(new[] { "FkIdEmployee" }, "fk_idEmployeeContract");

                    b.ToTable("contract", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.PersonF.Contractstatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("description");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("contractstatus", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.PersonF.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime")
                        .HasColumnName("creationDate");

                    b.Property<int>("FkIdPersonCate")
                        .HasColumnType("int")
                        .HasColumnName("fkIdPersonCate");

                    b.Property<int>("FkIdPersonType")
                        .HasColumnType("int")
                        .HasColumnName("fkIdPersonType");

                    b.Property<int>("FkIdTown")
                        .HasColumnType("int")
                        .HasColumnName("fkIdTown");

                    b.Property<string>("Idperson")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("idperson");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "FkIdPersonCate" }, "fk_idPersonCate");

                    b.HasIndex(new[] { "FkIdPersonType" }, "fk_idPersonType");

                    b.HasIndex(new[] { "FkIdTown" }, "fk_idTown");

                    b.HasIndex(new[] { "Idperson" }, "idperson")
                        .IsUnique();

                    b.ToTable("person", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.PersonF.Personcategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("description");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("personcategory", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.PersonF.Personcontact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("description");

                    b.Property<int>("FkIdContactType")
                        .HasColumnType("int")
                        .HasColumnName("fkIdContactType");

                    b.Property<int>("FkIdPerson")
                        .HasColumnType("int")
                        .HasColumnName("fkIdPerson");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "FkIdContactType" }, "fk_idContactType");

                    b.HasIndex(new[] { "FkIdPerson" }, "fk_idPersonCont");

                    b.ToTable("personcontact", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.PersonF.Persontype", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("description");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("persontype", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Company.Shiftscheduling", b =>
                {
                    b.HasOne("Domain.Entities.PersonF.Contract", "FkIdContractNavigation")
                        .WithMany("Shiftschedulings")
                        .HasForeignKey("FkIdContract")
                        .IsRequired()
                        .HasConstraintName("fk_idContract");

                    b.HasOne("Domain.Entities.PersonF.Person", "FkIdPersonNavigation")
                        .WithMany("Shiftschedulings")
                        .HasForeignKey("FkIdPerson")
                        .IsRequired()
                        .HasConstraintName("fk_idEmploShiftSche");

                    b.HasOne("Domain.Entities.Company.Workshift", "FkIdWorkShiftsNavigation")
                        .WithMany("Shiftschedulings")
                        .HasForeignKey("FkIdWorkShifts")
                        .IsRequired()
                        .HasConstraintName("fk_idWorkShifts");

                    b.Navigation("FkIdContractNavigation");

                    b.Navigation("FkIdPersonNavigation");

                    b.Navigation("FkIdWorkShiftsNavigation");
                });

            modelBuilder.Entity("Domain.Entities.Location.Address", b =>
                {
                    b.HasOne("Domain.Entities.Location.Addresstype", "FkIdAddressTypeNavigation")
                        .WithMany("Addresses")
                        .HasForeignKey("FkIdAddressType")
                        .IsRequired()
                        .HasConstraintName("fk_idAddressType");

                    b.HasOne("Domain.Entities.PersonF.Person", "FkIdPersonNavigation")
                        .WithMany("Addresses")
                        .HasForeignKey("FkIdPerson")
                        .IsRequired()
                        .HasConstraintName("fk_idEmployee");

                    b.Navigation("FkIdAddressTypeNavigation");

                    b.Navigation("FkIdPersonNavigation");
                });

            modelBuilder.Entity("Domain.Entities.Location.Department", b =>
                {
                    b.HasOne("Domain.Entities.Location.Country", "FkIdCountryNavigation")
                        .WithMany("Departments")
                        .HasForeignKey("FkIdCountry")
                        .IsRequired()
                        .HasConstraintName("fk_idCountry");

                    b.Navigation("FkIdCountryNavigation");
                });

            modelBuilder.Entity("Domain.Entities.Location.Town", b =>
                {
                    b.HasOne("Domain.Entities.Location.Department", "FkIdDepartmentNavigation")
                        .WithMany("Towns")
                        .HasForeignKey("FkIdDepartment")
                        .IsRequired()
                        .HasConstraintName("fk_idDepartment");

                    b.Navigation("FkIdDepartmentNavigation");
                });

            modelBuilder.Entity("Domain.Entities.PersonF.Contract", b =>
                {
                    b.HasOne("Domain.Entities.PersonF.Person", "FkIdClientNavigation")
                        .WithMany("ContractFkIdClientNavigations")
                        .HasForeignKey("FkIdClient")
                        .IsRequired()
                        .HasConstraintName("fk_idClientContract");

                    b.HasOne("Domain.Entities.PersonF.Contractstatus", "FkIdContractStatusNavigation")
                        .WithMany("Contracts")
                        .HasForeignKey("FkIdContractStatus")
                        .IsRequired()
                        .HasConstraintName("fk_idContractStatus");

                    b.HasOne("Domain.Entities.PersonF.Person", "FkIdEmployeeNavigation")
                        .WithMany("ContractFkIdEmployeeNavigations")
                        .HasForeignKey("FkIdEmployee")
                        .IsRequired()
                        .HasConstraintName("fk_idEmployeeContract");

                    b.Navigation("FkIdClientNavigation");

                    b.Navigation("FkIdContractStatusNavigation");

                    b.Navigation("FkIdEmployeeNavigation");
                });

            modelBuilder.Entity("Domain.Entities.PersonF.Person", b =>
                {
                    b.HasOne("Domain.Entities.PersonF.Personcategory", "FkIdPersonCateNavigation")
                        .WithMany("People")
                        .HasForeignKey("FkIdPersonCate")
                        .IsRequired()
                        .HasConstraintName("fk_idPersonCate");

                    b.HasOne("Domain.Entities.PersonF.Persontype", "FkIdPersonTypeNavigation")
                        .WithMany("People")
                        .HasForeignKey("FkIdPersonType")
                        .IsRequired()
                        .HasConstraintName("fk_idPersonType");

                    b.HasOne("Domain.Entities.Location.Town", "FkIdTownNavigation")
                        .WithMany("People")
                        .HasForeignKey("FkIdTown")
                        .IsRequired()
                        .HasConstraintName("fk_idTown");

                    b.Navigation("FkIdPersonCateNavigation");

                    b.Navigation("FkIdPersonTypeNavigation");

                    b.Navigation("FkIdTownNavigation");
                });

            modelBuilder.Entity("Domain.Entities.PersonF.Personcontact", b =>
                {
                    b.HasOne("Domain.Entities.PersonF.Contacttype", "FkIdContactTypeNavigation")
                        .WithMany("Personcontacts")
                        .HasForeignKey("FkIdContactType")
                        .IsRequired()
                        .HasConstraintName("fk_idContactType");

                    b.HasOne("Domain.Entities.PersonF.Person", "FkIdPersonNavigation")
                        .WithMany("Personcontacts")
                        .HasForeignKey("FkIdPerson")
                        .IsRequired()
                        .HasConstraintName("fk_idPersonCont");

                    b.Navigation("FkIdContactTypeNavigation");

                    b.Navigation("FkIdPersonNavigation");
                });

            modelBuilder.Entity("Domain.Entities.Company.Workshift", b =>
                {
                    b.Navigation("Shiftschedulings");
                });

            modelBuilder.Entity("Domain.Entities.Location.Addresstype", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("Domain.Entities.Location.Country", b =>
                {
                    b.Navigation("Departments");
                });

            modelBuilder.Entity("Domain.Entities.Location.Department", b =>
                {
                    b.Navigation("Towns");
                });

            modelBuilder.Entity("Domain.Entities.Location.Town", b =>
                {
                    b.Navigation("People");
                });

            modelBuilder.Entity("Domain.Entities.PersonF.Contacttype", b =>
                {
                    b.Navigation("Personcontacts");
                });

            modelBuilder.Entity("Domain.Entities.PersonF.Contract", b =>
                {
                    b.Navigation("Shiftschedulings");
                });

            modelBuilder.Entity("Domain.Entities.PersonF.Contractstatus", b =>
                {
                    b.Navigation("Contracts");
                });

            modelBuilder.Entity("Domain.Entities.PersonF.Person", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("ContractFkIdClientNavigations");

                    b.Navigation("ContractFkIdEmployeeNavigations");

                    b.Navigation("Personcontacts");

                    b.Navigation("Shiftschedulings");
                });

            modelBuilder.Entity("Domain.Entities.PersonF.Personcategory", b =>
                {
                    b.Navigation("People");
                });

            modelBuilder.Entity("Domain.Entities.PersonF.Persontype", b =>
                {
                    b.Navigation("People");
                });
#pragma warning restore 612, 618
        }
    }
}
